#!/usr/bin/python3
# coding: utf-8

import re
import time
from argparse import ArgumentParser
from configparser import ConfigParser
from pprint import pprint
from subprocess import CalledProcessError, run

SNAP_PREFIX = "snap-"
SNAP_PATTERN = re.compile(r"snap-\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$")


def snap(dataset, timestamp):
    snapshot_name = f"{dataset}@{SNAP_PREFIX}{timestamp}"
    run(["zfs", "snapshot", snapshot_name], check=True)
    return snapshot_name


def list_snaps(dataset, host=None):
    args = ["zfs", "list", "-t", "snapshot", "-H", "-o", "name", dataset]
    if host:
        args = ["ssh", host] + args
    cmd = run(args, capture_output=True)
    snaps = cmd.stdout.decode().split()
    return [x for x in snaps if SNAP_PATTERN.search(x)]


def send(snapshot, host, target_dataset, base_snaphost=None):
    args = ["zfs", "send"]
    if base_snaphost:
        args += ["-I", base_snaphost]
    args.append(snapshot)
    send_cmd = run(args, capture_output=True, check=True)
    run(
        ["ssh", host, "zfs", "receive", "-vF", target_dataset],
        input=send_cmd.stdout,
        check=True,
    )


def prune(snapshots, host=None, keep=1):
    print(f"Current snaps on {host if host else 'localhost'}:")
    pprint(snapshots)
    if len(snapshots) > keep:
        print("Purge Snaps:")
        begin = snapshots[0]
        end = snapshots[-keep - 1].split("@")[1]
        args = ["zfs", "destroy", "-v", f"{begin}%{end}"]
        if host:
            args = ["ssh", host] + args
        run(args, check=True)


def main():
    parser = ArgumentParser(
        prog="ZFS Replication",
        description="Script to automate zfs replication",
    )
    parser.add_argument("-f", dest="config_file", default="config.ini")
    args = parser.parse_args()

    config = ConfigParser()
    config.read(args.config_file)
    host = config["ssh"]["host"]
    snaps_keep = int(config["snapshot"]["keep"])
    timestamp = time.strftime("%Y-%m-%dT%H:%M:%S")

    for src_dataset, dst_dataset in config["datasets"].items():
        print("Start replication from", src_dataset, "to", dst_dataset, "on", host)
        snapshot_name = snap(src_dataset, timestamp)

        remote_snaps = list_snaps(dst_dataset, host)

        if remote_snaps:
            print("Sending incremental stream")
            latest_snap = remote_snaps[-1].split("@")[1]
            send(snapshot_name, host, dst_dataset, base_snaphost=latest_snap)
        else:
            print("No base snaphost found, send full stream")
            send(snapshot_name, host, dst_dataset)

        local_snaps = list_snaps(src_dataset)
        prune(local_snaps, keep=snaps_keep)
        remote_snaps = list_snaps(dst_dataset, host)
        prune(remote_snaps, host=host, keep=snaps_keep)


if __name__ == "__main__":
    try:
        main()
    except CalledProcessError as e:
        if e.stderr:
            print(e.stderr.decode(), end="")
        print(e)
        exit(e.returncode)
